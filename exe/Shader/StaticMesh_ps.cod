//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer OBJECT_CONSTANTS
// {
//
//   float4x4 world;                    // Offset:    0 Size:    64 [unused]
//   float4 color;                      // Offset:   64 Size:    16
//
// }
//
// cbuffer CAMERA_CONSTANTS
// {
//
//   struct CAMERA
//   {
//       
//       float4 position;               // Offset:    0
//       float4 direction;              // Offset:   16
//       row_major float4x4 view;       // Offset:   32
//       row_major float4x4 projection; // Offset:   96
//       row_major float4x4 viewProjection;// Offset:  160
//       row_major float4x4 inverseView;// Offset:  224
//       row_major float4x4 inverseProjection;// Offset:  288
//       row_major float4x4 inverseViewProjection;// Offset:  352
//
//   } camera;                          // Offset:    0 Size:   416
//
// }
//
// cbuffer LIGHT_CONSTATNS
// {
//
//   float4 ambient;                    // Offset:    0 Size:    16 [unused]
//   
//   struct POINT_LIGHT
//   {
//       
//       float index;                   // Offset:   16
//       float range;                   // Offset:   20
//       float type;                    // Offset:   24
//       float dummy;                   // Offset:   28
//       float4 pos;                    // Offset:   32
//       float4 color;                  // Offset:   48
//
//   } pointLight[32];                  // Offset:   16 Size:  1536 [unused]
//   
//   struct SPOT_LIGHT
//   {
//       
//       float index;                   // Offset: 1552
//       float range;                   // Offset: 1556
//       float type;                    // Offset: 1560
//       float innerCorn;               // Offset: 1564
//       float outerCorn;               // Offset: 1568
//       float dummy0;                  // Offset: 1572
//       float dummy1;                  // Offset: 1576
//       float dummy2;                  // Offset: 1580
//       float4 pos;                    // Offset: 1584
//       float4 color;                  // Offset: 1600
//       float4 dir;                    // Offset: 1616
//
//   } spotLight[32];                   // Offset: 1552 Size:  2560 [unused]
//   
//   struct DIRECTIONAL_LIGHT
//   {
//       
//       float4 direction;              // Offset: 4112
//       float4 color;                  // Offset: 4128
//
//   } directionalLight;                // Offset: 4112 Size:    32
//
// }
//
// cbuffer RendererConstants
// {
//
//   float4 warmFactor;                 // Offset:    0 Size:    16 [unused]
//   float4 coolFactor;                 // Offset:   16 Size:    16 [unused]
//   float ambientIntensity;            // Offset:   32 Size:     4
//      = 0x3e800000 
//   float specularIntensity;           // Offset:   36 Size:     4 [unused]
//   float specularPower;               // Offset:   40 Size:     4 [unused]
//   uint halfLambert;                  // Offset:   44 Size:     4 [unused]
//   float4 params;                     // Offset:   48 Size:    16 [unused]
//   int4 flags;                        // Offset:   64 Size:    16 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// pointSamplerState                 sampler      NA          NA             s0      1 
// anisotropicSamplerState           sampler      NA          NA             s2      1 
// diffuseMap                        texture  float4          2d             t0      1 
// ambientMap                        texture  float4          2d             t1      1 
// specularMap                       texture  float4          2d             t2      1 
// normalMap                         texture  float4          2d             t3      1 
// OBJECT_CONSTANTS                  cbuffer      NA          NA            cb0      1 
// CAMERA_CONSTANTS                  cbuffer      NA          NA            cb1      1 
// LIGHT_CONSTATNS                   cbuffer      NA          NA            cb2      1 
// RendererConstants                 cbuffer      NA          NA            cb3      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// POSITION                 0   xyzw        1     NONE   float   xyz 
// NORMAL                   0   xyzw        2     NONE   float   xyz 
// TANGENT                  0   xyzw        3     NONE   float   xyz 
// BINORMAL                 0   xyzw        4     NONE   float   xyz 
// TEXCOORD                 0   xy          5     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB0[5], immediateIndexed
dcl_constantbuffer CB1[1], immediateIndexed
dcl_constantbuffer CB2[259], immediateIndexed
dcl_constantbuffer CB3[3], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s2, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_input_ps linear v1.xyz
dcl_input_ps linear v2.xyz
dcl_input_ps linear v3.xyz
dcl_input_ps linear v4.xyz
dcl_input_ps linear v5.xy
dcl_output o0.xyzw
dcl_temps 8
dcl_indexableTemp x0[2], 4
dcl_indexableTemp x1[2], 4
//
// Initial variable locations:
//   v0.x <- pin.sv_position.x; v0.y <- pin.sv_position.y; v0.z <- pin.sv_position.z; v0.w <- pin.sv_position.w; 
//   v1.x <- pin.position.x; v1.y <- pin.position.y; v1.z <- pin.position.z; v1.w <- pin.position.w; 
//   v2.x <- pin.normal.x; v2.y <- pin.normal.y; v2.z <- pin.normal.z; v2.w <- pin.normal.w; 
//   v3.x <- pin.tangent.x; v3.y <- pin.tangent.y; v3.z <- pin.tangent.z; v3.w <- pin.tangent.w; 
//   v4.x <- pin.binormal.x; v4.y <- pin.binormal.y; v4.z <- pin.binormal.z; v4.w <- pin.binormal.w; 
//   v5.x <- pin.texcoord.x; v5.y <- pin.texcoord.y; 
//   o0.x <- <main return value>.x; o0.y <- <main return value>.y; o0.z <- <main return value>.z; o0.w <- <main return value>.w; 
//   x0 <- p0; x1 <- p1
//
#line 16 "C:\Myfolder\3年次\StartingOver\StartingOver\myLibScripts\Shader\StaticMesh_ps.hlsl"
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v5.xyxx, t0.xyzw, s2
mul r0.xyzw, r0.xyzw, cb0[4].xyzw  // r0.x <- diffuseMapColor.x; r0.y <- diffuseMapColor.y; r0.z <- diffuseMapColor.z; r0.w <- diffuseMapColor.w

#line 17
mov r0.w, r0.w  // r0.w <- alpha

#line 20
sample_indexable(texture2d)(float,float,float,float) r1.xyz, v5.xyxx, t1.xyzw, s2
mul r1.xyz, r1.xyzx, cb3[2].xxxx  // r1.x <- ambientMapColor.x; r1.y <- ambientMapColor.y; r1.z <- ambientMapColor.z

#line 22
sample_indexable(texture2d)(float,float,float,float) r2.xyz, v5.xyxx, t2.xyzw, s2
mov r2.xyz, r2.xyzx  // r2.x <- specularMapColor.x; r2.y <- specularMapColor.y; r2.z <- specularMapColor.z

#line 24
sample_indexable(texture2d)(float,float,float,float) r3.xyz, v5.xyxx, t3.xyzw, s0
mov r3.xyz, r3.xyzx  // r3.x <- normalMapColor.x; r3.y <- normalMapColor.y; r3.z <- normalMapColor.z

#line 25
mov r4.xyz, l(-0.500000,-0.500000,-0.500000,-0.000000)
add r3.xyz, r3.xyzx, r4.xyzx

#line 32
dp3 r1.w, v2.xyzx, v2.xyzx
rsq r1.w, r1.w
mul r4.xyz, r1.wwww, v2.xyzx  // r4.x <- N.x; r4.y <- N.y; r4.z <- N.z

#line 34
dp3 r1.w, v3.xyzx, v3.xyzx
rsq r1.w, r1.w
mul r5.xyz, r1.wwww, v3.xyzx  // r5.x <- T.x; r5.y <- T.y; r5.z <- T.z

#line 36
dp3 r1.w, v4.xyzx, v4.xyzx
rsq r1.w, r1.w
mul r6.xyz, r1.wwww, v4.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z

#line 38
mul r5.xyz, r3.xxxx, r5.xyzx
mul r3.xyw, r3.yyyy, r6.xyxz
add r3.xyw, r3.xyxw, r5.xyxz
mul r4.xyz, r3.zzzz, r4.xyzx
add r3.xyz, r3.xywx, r4.xyzx
dp3 r1.w, r3.xyzx, r3.xyzx
rsq r1.w, r1.w
mul r3.xyz, r1.wwww, r3.xyzx  // r3.x <- N.x; r3.y <- N.y; r3.z <- N.z

#line 40
mov r4.xyz, -cb2[257].xyzx
dp3 r1.w, r4.xyzx, r4.xyzx
rsq r1.w, r1.w
mul r4.xyz, r1.wwww, r4.xyzx  // r4.x <- L.x; r4.y <- L.y; r4.z <- L.z

#line 41
itof r1.w, l(0)
dp3 r2.w, r4.xyzx, r3.xyzx
max r1.w, r1.w, r2.w
mul r1.w, r1.w, l(0.500000)
add r1.w, r1.w, l(0.500000)  // r1.w <- diffuseFactor

#line 42
mul r1.w, r1.w, r1.w

#line 44
mov r2.w, l(0)  // r2.w <- specularFactor

#line 59
itof r3.w, l(1)
mov r4.x, -r1.w
add r3.w, r3.w, r4.x
mul r1.xyz, r1.xyzx, r3.wwww  // r1.x <- Ka.x; r1.y <- Ka.y; r1.z <- Ka.z

#line 60
mul r0.xyz, r0.xyzx, r1.wwww  // r0.x <- Kd.x; r0.y <- Kd.y; r0.z <- Kd.z

#line 61
mul r4.xyz, r2.wwww, r2.xyzx  // r4.x <- Ks.x; r4.y <- Ks.y; r4.z <- Ks.z

#line 62
add r0.xyz, r0.xyzx, r1.xyzx
add r0.xyz, r4.xyzx, r0.xyzx
mul r0.xyz, r0.xyzx, cb2[258].xyzx
mul r0.xyz, r0.xyzx, cb2[258].wwww  // r0.x <- fragmentColor.x; r0.y <- fragmentColor.y; r0.z <- fragmentColor.z

#line 66
itof r1.xyz, l(1, 1, 1, 0)  // r1.x <- colour.x; r1.y <- colour.y; r1.z <- colour.z

#line 67
itof r1.w, l(3)  // r1.w <- range

#line 72
mov x0[0].xyz, l(0.680000,2.550000,6.080000,0)

#line 73
mov x1[0].xyz, l(0.680000,2.550000,4.380000,0)

#line 74
mov x0[1].xyz, l(1.020000,2.550000,6.080000,0)

#line 75
mov x1[1].xyz, l(1.020000,2.550000,4.380000,0)

#line 77
mov r2.w, l(0)  // r2.w <- i
mov r4.xyz, r0.xyzx  // r4.x <- fragmentColor.x; r4.y <- fragmentColor.y; r4.z <- fragmentColor.z
mov r3.w, r2.w  // r3.w <- i
loop 
  ilt r4.w, r3.w, l(2)
  breakc_z r4.w

#line 79
  mov r5.xyz, x1[r3.w + 0].xyzx
  mov r6.xyz, x0[r3.w + 0].xyzx
  mov r6.xyz, -r6.xyzx
  add r5.xyz, r5.xyzx, r6.xyzx
  dp3 r4.w, r5.xyzx, r5.xyzx
  sqrt r4.w, r4.w  // r4.w <- l

#line 80
  mov r5.xyz, x1[r3.w + 0].xyzx
  mov r6.xyz, x0[r3.w + 0].xyzx
  mov r6.xyz, -r6.xyzx
  add r5.xyz, r5.xyzx, r6.xyzx
  dp3 r5.w, r5.xyzx, r5.xyzx
  rsq r5.w, r5.w
  mul r5.xyz, r5.wwww, r5.xyzx  // r5.x <- d.x; r5.y <- d.y; r5.z <- d.z

#line 81
  mov r6.xyz, x0[r3.w + 0].xyzx
  mov r7.xyz, x0[r3.w + 0].xyzx
  mov r7.xyz, -r7.xyzx
  add r7.xyz, r7.xyzx, v1.xyzx
  dp3 r5.w, r7.xyzx, r5.xyzx
  div r5.w, r5.w, r4.w
  max r5.w, r5.w, l(0.000000)
  min r5.w, r5.w, l(1.000000)
  mul r5.xyz, r5.wwww, r5.xyzx
  mul r5.xyz, r4.wwww, r5.xyzx
  add r5.xyz, r5.xyzx, r6.xyzx  // r5.x <- closestPoint.x; r5.y <- closestPoint.y; r5.z <- closestPoint.z

#line 83
  mov r6.xyz, -v1.xyzx
  add r5.xyz, r5.xyzx, r6.xyzx  // r5.x <- pointLightDirection.x; r5.y <- pointLightDirection.y; r5.z <- pointLightDirection.z

#line 84
  dp3 r4.w, r5.xyzx, r5.xyzx
  sqrt r4.w, r4.w  // r4.w <- distance

#line 85
  itof r5.w, l(1)
  itof r6.x, l(1)
  mul r4.w, r4.w, r6.x
  div r4.w, r4.w, r1.w
  max r4.w, r4.w, l(0.000000)
  min r4.w, r4.w, l(1.000000)
  mov r4.w, -r4.w
  add r4.w, r4.w, r5.w  // r4.w <- attenuation

#line 87
  dp3 r5.w, r5.xyzx, r5.xyzx
  rsq r5.w, r5.w
  mul r6.xyz, r5.wwww, r5.xyzx  // r6.x <- L.x; r6.y <- L.y; r6.z <- L.z

#line 89
  dp3 r5.w, r6.xyzx, r3.xyzx
  mul r5.w, r4.w, r5.w
  mul r5.w, r4.w, r5.w
  mul r5.w, r5.w, l(0.500000)  // r5.w <- diffuseFactor

#line 91
  itof r6.x, l(0)
  max r5.w, r5.w, r6.x
  mul r6.xyz, r1.xyzx, r5.wwww
  add r6.xyz, r4.xyzx, r6.xyzx  // r6.x <- fragmentColor.x; r6.y <- fragmentColor.y; r6.z <- fragmentColor.z

#line 94
  mov r7.xyz, -v1.xyzx
  add r7.xyz, r7.xyzx, cb1[0].xyzx
  dp3 r5.w, r7.xyzx, r7.xyzx
  rsq r5.w, r5.w
  mul r7.xyz, r5.wwww, r7.xyzx  // r7.x <- E.x; r7.y <- E.y; r7.z <- E.z

#line 96
  add r5.xyz, r5.xyzx, r7.xyzx
  dp3 r5.w, r5.xyzx, r5.xyzx
  rsq r5.w, r5.w
  mul r5.xyz, r5.wwww, r5.xyzx  // r5.x <- H.x; r5.y <- H.y; r5.z <- H.z

#line 97
  dp3 r5.x, r5.xyzx, r3.xyzx
  itof r5.y, l(0)
  max r5.x, r5.y, r5.x  // r5.x <- specularFactor

#line 99
  itof r5.y, l(360)
  log r5.x, r5.x
  mul r5.x, r5.x, r5.y
  exp r5.x, r5.x
  mul r5.x, r5.x, l(0.250000)  // r5.x <- specularFactor

#line 124
  mul r5.xyz, r1.xyzx, r5.xxxx
  mul r5.xyz, r2.xyzx, r5.xyzx
  mul r5.xyz, r4.wwww, r5.xyzx
  mul r5.xyz, r5.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  add r4.xyz, r5.xyzx, r6.xyzx  // r4.x <- fragmentColor.x; r4.y <- fragmentColor.y; r4.z <- fragmentColor.z

#line 125
  iadd r3.w, r3.w, l(1)
endloop 

#line 133
mov o0.xyz, r4.xyzx
mov o0.w, r0.w
ret 
// Approximately 135 instruction slots used
