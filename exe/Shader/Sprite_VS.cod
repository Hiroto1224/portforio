//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   xyz 
// NORMAL                   0   xyz         1     NONE   float       
// TEXCOORD                 0   xy          2     NONE   float   xy  
// COLOUR                   0   xyzw        3     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// COLOUR                   0   xyzw        2     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_input v0.xyz
dcl_input v2.xy
dcl_input v3.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xy
dcl_output o2.xyzw
dcl_temps 3
//
// Initial variable locations:
//   v0.x <- input.Position.x; v0.y <- input.Position.y; v0.z <- input.Position.z; 
//   v1.x <- input.Normal.x; v1.y <- input.Normal.y; v1.z <- input.Normal.z; 
//   v2.x <- input.Tex.x; v2.y <- input.Tex.y; 
//   v3.x <- input.Colour.x; v3.y <- input.Colour.y; v3.z <- input.Colour.z; v3.w <- input.Colour.w; 
//   o2.x <- <main return value>.Colour.x; o2.y <- <main return value>.Colour.y; o2.z <- <main return value>.Colour.z; o2.w <- <main return value>.Colour.w; 
//   o1.x <- <main return value>.Tex.x; o1.y <- <main return value>.Tex.y; 
//   o0.x <- <main return value>.Position.x; o0.y <- <main return value>.Position.y; o0.z <- <main return value>.Position.z; o0.w <- <main return value>.Position.w
//
#line 11 "C:\Myfolder\3年次\StartingOver\StartingOver\myLibScripts\Shader\Sprite_VS.hlsl"
itof r0.w, l(1)  // r0.w <- output.Position.w
mov r0.xyz, v0.xyzx  // r0.x <- output.Position.x; r0.y <- output.Position.y; r0.z <- output.Position.z

#line 12
mov r1.xyzw, v3.xyzw  // r1.x <- output.Colour.x; r1.y <- output.Colour.y; r1.z <- output.Colour.z; r1.w <- output.Colour.w

#line 13
mov r2.xy, v2.xyxx  // r2.x <- output.Tex.x; r2.y <- output.Tex.y

#line 15
mov o0.xyzw, r0.xyzw
mov o2.xyzw, r1.xyzw
mov o1.xy, r2.xyxx
ret 
// Approximately 8 instruction slots used
