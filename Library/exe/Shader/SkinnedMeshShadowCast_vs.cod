//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CAMERA_CONSTANTS
// {
//
//   struct CAMERA
//   {
//       
//       float4 position;               // Offset:    0
//       float4 direction;              // Offset:   16
//       row_major float4x4 view;       // Offset:   32
//       row_major float4x4 projection; // Offset:   96
//       row_major float4x4 viewProjection;// Offset:  160
//       row_major float4x4 inverseView;// Offset:  224
//       row_major float4x4 inverseProjection;// Offset:  288
//       row_major float4x4 inverseViewProjection;// Offset:  352
//
//   } camera;                          // Offset:    0 Size:   416
//
// }
//
// cbuffer OBJECTCONSTANTS
// {
//
//   float4x4 world;                    // Offset:    0 Size:    64
//   float4x4 boneTransforms[128];      // Offset:   64 Size:  8192
//   float4 color;                      // Offset: 8256 Size:    16 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// OBJECTCONSTANTS                   cbuffer      NA          NA            cb0      1 
// CAMERA_CONSTANTS                  cbuffer      NA          NA            cb1      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// WEIGHTS                  0   xyzw        1     NONE   float   xyzw
// BONES                    0   xyzw        2     NONE    uint   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000},
                              { -1, 0, 0, 0},
                              { 0, -1, 0, 0},
                              { 0, 0, -1, 0},
                              { 0, 0, 0, -1} }
dcl_constantbuffer CB1[14], immediateIndexed
dcl_constantbuffer CB0[515], dynamicIndexed
dcl_input v0.xyzw
dcl_input v1.xyzw
dcl_input v2.xyzw
dcl_output_siv o0.xyzw, position
dcl_temps 6
//
// Initial variable locations:
//   v0.x <- position.x; v0.y <- position.y; v0.z <- position.z; v0.w <- position.w; 
//   v1.x <- boneWeights.x; v1.y <- boneWeights.y; v1.z <- boneWeights.z; v1.w <- boneWeights.w; 
//   v2.x <- boneIndices.x; v2.y <- boneIndices.y; v2.z <- boneIndices.z; v2.w <- boneIndices.w; 
//   o0.x <- <main return value>.x; o0.y <- <main return value>.y; o0.z <- <main return value>.z; o0.w <- <main return value>.w
//
#line 8 "C:\Myfolder\3年次\StartingOver\StartingOver\myLibScripts\Shader\SkinnedMeshShadowCast_vs.hlsl"
itof r0.xyz, l(0, 0, 0, 0)  // r0.x <- blendedPosition.x; r0.y <- blendedPosition.y; r0.z <- blendedPosition.z

#line 9
mov r0.w, l(0)  // r0.w <- i
mov r1.xyz, r0.xyzx  // r1.x <- blendedPosition.x; r1.y <- blendedPosition.y; r1.z <- blendedPosition.z
mov r2.x, r0.w  // r2.x <- i
loop 
  ilt r2.y, r2.x, l(4)
  breakc_z r2.y

#line 11
  dp4 r2.y, v1.xyzw, icb[r2.x + 0].xyzw
  and r3.xyzw, v2.xyzw, icb[r2.x + 4].xyzw
  or r2.zw, r3.yyyw, r3.xxxz
  or r2.z, r2.w, r2.z
  imul null, r2.z, r2.z, l(4)
  dp4 r3.x, v0.xyzw, cb0[r2.z + 4].xyzw
  dp4 r3.y, v0.xyzw, cb0[r2.z + 5].xyzw
  dp4 r3.z, v0.xyzw, cb0[r2.z + 6].xyzw
  mul r2.yzw, r2.yyyy, r3.xxyz
  add r1.xyz, r1.xyzx, r2.yzwy

#line 12
  iadd r2.x, r2.x, l(1)
endloop 

#line 14
mov r1.xyz, r1.xyzx  // r1.x <- position.x; r1.y <- position.y; r1.z <- position.z
mov r1.w, l(1.000000)  // r1.w <- position.w

#line 16
mul r0.xyzw, cb1[10].xxxx, cb0[0].xyzw
mul r2.xyzw, cb1[11].xxxx, cb0[1].xyzw
add r0.xyzw, r0.xyzw, r2.xyzw
mul r2.xyzw, cb1[12].xxxx, cb0[2].xyzw
add r0.xyzw, r0.xyzw, r2.xyzw
mul r2.xyzw, cb1[13].xxxx, cb0[3].xyzw
add r0.xyzw, r0.xyzw, r2.xyzw
mul r2.xyzw, cb1[10].yyyy, cb0[0].xyzw
mul r3.xyzw, cb1[11].yyyy, cb0[1].xyzw
add r2.xyzw, r2.xyzw, r3.xyzw
mul r3.xyzw, cb1[12].yyyy, cb0[2].xyzw
add r2.xyzw, r2.xyzw, r3.xyzw
mul r3.xyzw, cb1[13].yyyy, cb0[3].xyzw
add r2.xyzw, r2.xyzw, r3.xyzw
mul r3.xyzw, cb1[10].zzzz, cb0[0].xyzw
mul r4.xyzw, cb1[11].zzzz, cb0[1].xyzw
add r3.xyzw, r3.xyzw, r4.xyzw
mul r4.xyzw, cb1[12].zzzz, cb0[2].xyzw
add r3.xyzw, r3.xyzw, r4.xyzw
mul r4.xyzw, cb1[13].zzzz, cb0[3].xyzw
add r3.xyzw, r3.xyzw, r4.xyzw
mul r4.xyzw, cb1[10].wwww, cb0[0].xyzw
mul r5.xyzw, cb1[11].wwww, cb0[1].xyzw
add r4.xyzw, r4.xyzw, r5.xyzw
mul r5.xyzw, cb1[12].wwww, cb0[2].xyzw
add r4.xyzw, r4.xyzw, r5.xyzw
mul r5.xyzw, cb1[13].wwww, cb0[3].xyzw
add r4.xyzw, r4.xyzw, r5.xyzw
dp4 o0.x, r1.xyzw, r0.xyzw
dp4 o0.y, r1.xyzw, r2.xyzw
dp4 o0.z, r1.xyzw, r3.xyzw
dp4 o0.w, r1.xyzw, r4.xyzw
ret 
// Approximately 54 instruction slots used
