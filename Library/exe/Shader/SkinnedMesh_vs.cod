//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer OBJECTCONSTANTS
// {
//
//   float4x4 world;                    // Offset:    0 Size:    64
//   float4x4 boneTransforms[128];      // Offset:   64 Size:  8192
//   float4 color;                      // Offset: 8256 Size:    16 [unused]
//
// }
//
// cbuffer CAMERA_CONSTANTS
// {
//
//   struct CAMERA
//   {
//       
//       float4 position;               // Offset:    0
//       float4 direction;              // Offset:   16
//       row_major float4x4 view;       // Offset:   32
//       row_major float4x4 projection; // Offset:   96
//       row_major float4x4 viewProjection;// Offset:  160
//       row_major float4x4 inverseView;// Offset:  224
//       row_major float4x4 inverseProjection;// Offset:  288
//       row_major float4x4 inverseViewProjection;// Offset:  352
//
//   } camera;                          // Offset:    0 Size:   416
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// OBJECTCONSTANTS                   cbuffer      NA          NA            cb0      1 
// CAMERA_CONSTANTS                  cbuffer      NA          NA            cb1      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyzw        1     NONE   float   xyz 
// TANGENT                  0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 0   xy          3     NONE   float   xy  
// WEIGHTS                  0   xyzw        4     NONE   float   xyzw
// BONES                    0   xyzw        5     NONE    uint   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// POSITION                 0   xyzw        1     NONE   float   xyzw
// NORMAL                   0   xyzw        2     NONE   float   xyzw
// TANGENT                  0   xyzw        3     NONE   float   xyzw
// BINORMAL                 0   xyzw        4     NONE   float   xyzw
// TEXCOORD                 0   xy          5     NONE   float   xy  
//
vs_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000},
                              { -1, 0, 0, 0},
                              { 0, -1, 0, 0},
                              { 0, 0, -1, 0},
                              { 0, 0, 0, -1} }
dcl_constantbuffer CB0[515], dynamicIndexed
dcl_constantbuffer CB1[14], immediateIndexed
dcl_input v0.xyzw
dcl_input v1.xyz
dcl_input v2.xyzw
dcl_input v3.xy
dcl_input v4.xyzw
dcl_input v5.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.xy
dcl_temps 7
//
// Initial variable locations:
//   v0.x <- input.position.x; v0.y <- input.position.y; v0.z <- input.position.z; v0.w <- input.position.w; 
//   v1.x <- input.normal.x; v1.y <- input.normal.y; v1.z <- input.normal.z; v1.w <- input.normal.w; 
//   v2.x <- input.tangent.x; v2.y <- input.tangent.y; v2.z <- input.tangent.z; v2.w <- input.tangent.w; 
//   v3.x <- input.texCoord.x; v3.y <- input.texCoord.y; 
//   v4.x <- input.boneWeights.x; v4.y <- input.boneWeights.y; v4.z <- input.boneWeights.z; v4.w <- input.boneWeights.w; 
//   v5.x <- input.boneIndices.x; v5.y <- input.boneIndices.y; v5.z <- input.boneIndices.z; v5.w <- input.boneIndices.w; 
//   o5.x <- <main return value>.texCoord.x; o5.y <- <main return value>.texCoord.y; 
//   o4.x <- <main return value>.binormal.x; o4.y <- <main return value>.binormal.y; o4.z <- <main return value>.binormal.z; o4.w <- <main return value>.binormal.w; 
//   o3.x <- <main return value>.tangent.x; o3.y <- <main return value>.tangent.y; o3.z <- <main return value>.tangent.z; o3.w <- <main return value>.tangent.w; 
//   o2.x <- <main return value>.normal.x; o2.y <- <main return value>.normal.y; o2.z <- <main return value>.normal.z; o2.w <- <main return value>.normal.w; 
//   o1.x <- <main return value>.position.x; o1.y <- <main return value>.position.y; o1.z <- <main return value>.position.z; o1.w <- <main return value>.position.w; 
//   o0.x <- <main return value>.svPosition.x; o0.y <- <main return value>.svPosition.y; o0.z <- <main return value>.svPosition.z; o0.w <- <main return value>.svPosition.w
//
#line 6 "C:\Myfolder\3年次\StartingOver\StartingOver\myLibScripts\Shader\SkinnedMesh_vs.hlsl"
itof r0.xyz, l(0, 0, 0, 0)  // r0.x <- blendedPosition.x; r0.y <- blendedPosition.y; r0.z <- blendedPosition.z

#line 7
itof r1.xyz, l(0, 0, 0, 0)  // r1.x <- blendedNormal.x; r1.y <- blendedNormal.y; r1.z <- blendedNormal.z

#line 8
mov r0.w, l(0)  // r0.w <- i
mov r2.xyz, r0.xyzx  // r2.x <- blendedPosition.x; r2.y <- blendedPosition.y; r2.z <- blendedPosition.z
mov r3.xyz, r1.xyzx  // r3.x <- blendedNormal.x; r3.y <- blendedNormal.y; r3.z <- blendedNormal.z
mov r1.w, r0.w  // r1.w <- i
loop 
  ilt r4.x, r1.w, l(4)
  breakc_z r4.x

#line 10
  dp4 r4.x, v4.xyzw, icb[r1.w + 0].xyzw
  and r5.xyzw, v5.xyzw, icb[r1.w + 4].xyzw
  or r4.yz, r5.yywy, r5.xxzx
  or r4.y, r4.z, r4.y
  imul null, r4.y, r4.y, l(4)
  dp4 r5.x, v0.xyzw, cb0[r4.y + 4].xyzw
  dp4 r5.y, v0.xyzw, cb0[r4.y + 5].xyzw
  dp4 r5.z, v0.xyzw, cb0[r4.y + 6].xyzw
  mul r4.xyz, r4.xxxx, r5.xyzx
  add r2.xyz, r2.xyzx, r4.xyzx

#line 11
  dp4 r4.x, v4.xyzw, icb[r1.w + 0].xyzw
  itof r5.w, l(0)
  and r6.xyzw, v5.xyzw, icb[r1.w + 4].xyzw
  or r4.yz, r6.yywy, r6.xxzx
  or r4.y, r4.z, r4.y
  imul null, r4.y, r4.y, l(4)
  mov r5.xyz, v1.xyzx
  dp4 r6.x, r5.xyzw, cb0[r4.y + 4].xyzw
  dp4 r6.y, r5.xyzw, cb0[r4.y + 5].xyzw
  dp4 r6.z, r5.xyzw, cb0[r4.y + 6].xyzw
  mul r4.xyz, r4.xxxx, r6.xyzx
  add r3.xyz, r3.xyzx, r4.xyzx

#line 12
  iadd r1.w, r1.w, l(1)
endloop 

#line 13
mov r2.xyz, r2.xyzx  // r2.x <- input.position.x; r2.y <- input.position.y; r2.z <- input.position.z
mov r2.w, l(1.000000)  // r2.w <- input.position.w

#line 14
mov r3.xyz, r3.xyzx  // r3.x <- input.normal.x; r3.y <- input.normal.y; r3.z <- input.normal.z

#line 17
mul r0.xyzw, cb0[0].xyzw, cb1[10].xxxx
mul r1.xyzw, cb0[1].xyzw, cb1[11].xxxx
add r0.xyzw, r0.xyzw, r1.xyzw
mul r1.xyzw, cb0[2].xyzw, cb1[12].xxxx
add r0.xyzw, r0.xyzw, r1.xyzw
mul r1.xyzw, cb0[3].xyzw, cb1[13].xxxx
add r0.xyzw, r0.xyzw, r1.xyzw
mul r1.xyzw, cb0[0].xyzw, cb1[10].yyyy
mul r4.xyzw, cb0[1].xyzw, cb1[11].yyyy
add r1.xyzw, r1.xyzw, r4.xyzw
mul r4.xyzw, cb0[2].xyzw, cb1[12].yyyy
add r1.xyzw, r1.xyzw, r4.xyzw
mul r4.xyzw, cb0[3].xyzw, cb1[13].yyyy
add r1.xyzw, r1.xyzw, r4.xyzw
mul r4.xyzw, cb0[0].xyzw, cb1[10].zzzz
mul r5.xyzw, cb0[1].xyzw, cb1[11].zzzz
add r4.xyzw, r4.xyzw, r5.xyzw
mul r5.xyzw, cb0[2].xyzw, cb1[12].zzzz
add r4.xyzw, r4.xyzw, r5.xyzw
mul r5.xyzw, cb0[3].xyzw, cb1[13].zzzz
add r4.xyzw, r4.xyzw, r5.xyzw
mul r5.xyzw, cb0[0].xyzw, cb1[10].wwww
mul r6.xyzw, cb0[1].xyzw, cb1[11].wwww
add r5.xyzw, r5.xyzw, r6.xyzw
mul r6.xyzw, cb0[2].xyzw, cb1[12].wwww
add r5.xyzw, r5.xyzw, r6.xyzw
mul r6.xyzw, cb0[3].xyzw, cb1[13].wwww
add r5.xyzw, r5.xyzw, r6.xyzw
dp4 r0.x, r2.xyzw, r0.xyzw  // r0.x <- output.svPosition.x
dp4 r0.y, r2.xyzw, r1.xyzw  // r0.y <- output.svPosition.y
dp4 r0.z, r2.xyzw, r4.xyzw  // r0.z <- output.svPosition.z
dp4 r0.w, r2.xyzw, r5.xyzw  // r0.w <- output.svPosition.w

#line 19
dp4 r1.x, r2.xyzw, cb0[0].xyzw  // r1.x <- output.position.x
dp4 r1.y, r2.xyzw, cb0[1].xyzw  // r1.y <- output.position.y
dp4 r1.z, r2.xyzw, cb0[2].xyzw  // r1.z <- output.position.z
dp4 r1.w, r2.xyzw, cb0[3].xyzw  // r1.w <- output.position.w

#line 21
itof r3.w, l(0)  // r3.w <- input.normal.w

#line 22
dp4 r2.x, r3.xyzw, cb0[0].xyzw
dp4 r2.y, r3.xyzw, cb0[1].xyzw
dp4 r2.z, r3.xyzw, cb0[2].xyzw
dp4 r2.w, r3.xyzw, cb0[3].xyzw
dp4 r3.w, r2.xyzw, r2.xyzw
rsq r3.w, r3.w
mul r2.xyzw, r2.xyzw, r3.wwww  // r2.x <- output.normal.x; r2.y <- output.normal.y; r2.z <- output.normal.z; r2.w <- output.normal.w

#line 24
mov r3.w, v2.w  // r3.w <- sigma

#line 25
itof r4.w, l(0)  // r4.w <- input.tangent.w

#line 26
mov r4.xyz, v2.xyzx
dp4 r5.x, r4.xyzw, cb0[0].xyzw
dp4 r5.y, r4.xyzw, cb0[1].xyzw
dp4 r5.z, r4.xyzw, cb0[2].xyzw
dp4 r5.w, r4.xyzw, cb0[3].xyzw
dp4 r4.x, r5.xyzw, r5.xyzw
rsq r4.x, r4.x
mul r4.xyzw, r4.xxxx, r5.xyzw  // r4.x <- output.tangent.x; r4.y <- output.tangent.y; r4.z <- output.tangent.z; r4.w <- output.tangent.w

#line 28
mul r5.xyz, r3.yzxy, v2.zxyz
mul r3.xyz, r3.zxyz, v2.yzxy
mov r3.xyz, -r3.xyzx
add r3.xyz, r3.xyzx, r5.xyzx
mul r3.xyz, r3.wwww, r3.xyzx  // r3.x <- output.binormal.x; r3.y <- output.binormal.y; r3.z <- output.binormal.z

#line 29
itof r3.w, l(0)  // r3.w <- output.binormal.w

#line 31
mov r5.xy, v3.xyxx  // r5.x <- output.texCoord.x; r5.y <- output.texCoord.y

#line 33
mov o0.xyzw, r0.xyzw
mov o1.xyzw, r1.xyzw
mov o2.xyzw, r2.xyzw
mov o3.xyzw, r4.xyzw
mov o4.xyz, r3.xyzx
mov o4.w, r3.w
mov o5.xy, r5.xyxx
ret 
// Approximately 105 instruction slots used
